defmodule Memory.Game do

  def new do
    getBlankGame();
  end

  def getBlankGame do
    %{
       tiles: Enum.shuffle([%{value: "A", matched: false}, %{value: "A", matched: false},
                            %{value: "B", matched: false}, %{value: "B", matched: false},
                            %{value: "C", matched: false}, %{value: "C", matched: false},
                            %{value: "D", matched: false}, %{value: "D", matched: false},
                            %{value: "E", matched: false}, %{value: "E", matched: false},
                            %{value: "F", matched: false}, %{value: "F", matched: false},
                            %{value: "G", matched: false}, %{value: "G", matched: false},
                            %{value: "H", matched: false}, %{value: "H", matched: false}]),
      t1: -1,
      t2: -1,
      clicks: 0,
    }
  end

  def client_view(game) do
    displayTiles = 
  end

#  checkMatch() {
#    var n1 = this.state.t1;
#    var n2 = this.state.t2;
#    if(this.state.tiles[n1].value === this.state.tiles[n2].value) {
#      let myTiles = this.state.tiles.map((tile, i) => {
#        if (i == n1 || i == n2) {
#          return {...myTiles, matched: true};
#        }
#        else {
#          return tile;
#        }});
#      this.setState({tiles: myTiles});
#    }
#    this.setState({t1: -1, t2: -1});
#  }

  def checkMatches(game) do
#    if (tiles |> Enum.get(game.t1).value == tiles |> Enum.get(game.t2).value) do    
#      game = %{ game | tiles: List.replace_at(game.tiles, 
      
    game      
#    end
  end

#  flip(_ev) {
#    if (_ev.target.id <= 15 && _ev.target.id >= 0) {
#      if (~this.state.tiles[_ev.target.id].matched) {
#        if (this.state.t1 == -1) {
#          this.setState({clicks: this.state.clicks + 1, t1: _ev.target.id});
#        }
#        else if (this.state.t2 == -1 && _ev.target.id != this.state.t1) {
#          this.setState({clicks: this.state.clicks + 1, t2: _ev.target.id});
#          setTimeout(this.checkMatch.bind(this), 1000);
#        }
#      }
#    }
#  }

  def flip(game, tileNum) do
    if !(game.tiles |> Enum.at(tileNum).matched) do
      if (game.t1 == -1) do
        game = %{game | t1: tileNum}
        game = %{game | clicks: game.clicks + 1}
      else 
        if (game.t2 == -1 && tileNum != game.t2) do
          game = %{game | t2: tileNum};
          game = %{game | clicks: game.clicks + 1}
          checkMatches(game)
        end
      end
    end
  end

  def restart(game) do
    game = getBlankGame();
  end
end
